name: "Ego Motion";

##
## Read video
##

node {
    name: "Kitti Reader";
    type: KittiReader;
    argument {
        name: "path";
        type: pb_string;
        value: "${DIR_DATA}/kitti/2011_09_26/2011_09_26_drive_0001_sync/";
        #value: "/mnt/data/KITTI/data/2011_09_26/2011_09_26_drive_0023_sync/";
    }
}

node {
    name: "Random Gaze";
    type: GazeRandom;
}

##
## Calculate Ego Motion
##

node {
    name: "Kitti Pose";
    type: KittiOXTSPose;
    input {
        node: "Kitti Reader";
        port: 5;
    }
    input {
        node: "Kitti Reader";
        port: 7;
    }
}


##
## Show Ego Motion Trajetory
##

node {
    name: "Ego Motion Trajectory";
    type: ExtrapolatePose;
    input {
        node: "Kitti Pose";
        port: 0;
    }
}

node {
    name: "Draw Ego Motion Trajectory";
    type: KittiDrawTrajectory;
    input {
        node: "Ego Motion Trajectory";
        port: 0;
    }
    input {
        node: "Kitti Reader";
        port: 7;
    }
    input {
        node: "Kitti Reader";
        port: 2;
    }
}

node {
    name: "Draw Tracklets";
    type: KittiTrackletDraw;
    argument {
        name: "camera";
        type: pb_complex;
        value: "saliency_sandbox::kitti::Camera::LEFT_RGB";
    }
    input {
        node: "Draw Ego Motion Trajectory";
        port: 0;
    }
    input {
        node: "Tracklet Saliency";
        port: 0;
    }
    input {
        node: "Kitti Reader";
        port: 7;
    }
}

node {
    name: "Show Ego Motion Trajectory";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Ego Motion Trajectory";
    }
    input {
        node: "Draw Tracklets";
        port: 0;
    }
}

##
## FOV
##

node {
    name: "Velodyne polar image";
    type: KittiVelodynePolar;
    input {
        node: "Kitti Reader";
        port: 4;
    }
}

node {
    name: "FOV";
    type: GazeFOV;
    input {
        node: "Random Gaze";
        port: 0;
    }
    input {
        node: "Velodyne polar image";
        port: 0;
    }
}

node {
    name: "FOV2Cam";
    type: KittiFOVToCam;
    input {
        node: "FOV";
        port: 0;
    }
    input {
        node: "Velodyne polar image";
        port: 0;
    }
    input {
        node: "Kitti Reader";
        port: 7;
    }
}

##
## Saliency
##

# extract velodyne features

node {
    name: "Depth2Cam";
    type: KittiFOVToCam;
    input {
        node: "Velodyne polar image";
        port: 0;
    }
    input {
        node: "Velodyne polar image";
        port: 0;
    }
    input {
        node: "Kitti Reader";
        port: 7;
    }
}

node {
    name: "Reflection2Cam";
    type: KittiFOVToCam;
    input {
        node: "Velodyne polar image";
        port: 1;
    }
    input {
        node: "Velodyne polar image";
        port: 0;
    }
    input {
        node: "Kitti Reader";
        port: 7;
    }
}

# extract lab features
node {
    name: "Convert to LAB";
    type: UtilsImageConverter;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_LABImage";
    }
    input {
        node: "Kitti Reader";
        port: 2;
    }
}

node {
    name: "LAB feature Map";
    type: UtilsMatrixSplit;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    argument {
        name: "type";
        type: pb_complex;
        value: "cv::Vec3f";
    }
    input {
        node: "Convert to LAB";
        port: 0;
    }
}

# calculate saliency maps

node {
    name: "Depth Highpass Saliency";
    type: SaliencyHighpass;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    input {
        node: "Depth2Cam";
        port: 0;
    }
    input {
        node: "FOV2Cam";
        port: 0;
    }
}

node {
    name: "Reflection Highpass Saliency";
    type: SaliencyHighpass;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    input {
        node: "Reflection2Cam";
        port: 0;
    }
    input {
        node: "FOV2Cam";
        port: 0;
    }
}

node {
    name: "Intensity Highpass Saliency";
    type: SaliencyHighpass;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    input {
        node: "LAB feature Map";
        port: 0;
    }
    input {
        node: "FOV2Cam";
        port: 0;
    }
}

node {
    name: "Green-Red Feature Highpass Saliency";
    type: SaliencyHighpass;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    input {
        node: "LAB feature Map";
        port: 1;
    }
    input {
        node: "FOV2Cam";
        port: 0;
    }
}

node {
    name: "Blue-Yellow Feature Highpass Saliency";
    type: SaliencyHighpass;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    input {
        node: "LAB feature Map";
        port: 2;
    }
    input {
        node: "FOV2Cam";
        port: 0;
    }
}

# combine saliency maps
node {
    name: "Merge Highpass Saliencies";
    type: UtilsMatrixMerge;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    argument {
        name: "type";
        type: pb_complex;
        value: "cv::Vec<float,5>";
    }
    input {
        node: "Depth Highpass Saliency";
        port: 0;
    }
    input {
        node: "Reflection Highpass Saliency";
        port: 0;
    }
    input {
        node: "Intensity Highpass Saliency";
        port: 0;
    }
    input {
        node: "Green-Red Feature Highpass Saliency";
        port: 0;
    }
    input {
        node: "Blue-Yellow Feature Highpass Saliency";
        port: 0;
    }
}

node {
    name: "Highpass Saliency";
    type: UtilsMatrixSum;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    argument {
        name: "type";
        type: pb_complex;
        value: "cv::Vec<float,5>";
    }
    input {
        node: "Merge Highpass Saliencies";
        port: 0;
    }
}

# assign saliency to tracklets
node {
    name: "Tracklet Saliency";
    type: KittiTrackletSaliency;
    argument {
        name: "camera";
        type: pb_complex;
        value: "saliency_sandbox::kitti::Camera::LEFT_RGB";
    }
    input {
        node: "Kitti Reader";
        port: 6;
    }
    input {
        node: "Highpass Saliency";
        port: 0;
    }
    input {
        node: "Kitti Reader";
        port: 7;
    }
}

##
## Plot Highpass Saliency
##

node {
    name: "Highpass Saliency Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_RGBImage";
    }
    input {
        node: "Highpass Saliency";
        port: 0;
    }
}

node {
    name: "Show Highpass Saliency";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Highpass Saliencies";
    }
    input {
        node: "Highpass Saliency Heatmap";
        port: 0;
    }
}

##
## Bird View
##

node {
    name: "Bird View";
    type: KittiDrawBirdView;
    input {
        node: "Ego Motion Trajectory";
        port: 0;
    }
    input {
        node: "Kitti Reader";
        port: 4;
    }
    input {
        node: "Tracklet Saliency";
        port: 0;
    }
    input {
        node: "FOV";
        port: 0;
    }
    input {
        node: "Velodyne polar image";
        port: 0;
    }
}

node {
    name: "Show Bird View";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Bird View";
    }
    input {
        node: "Bird View";
        port: 0;
    }
}

node {
    name: "Save Bird View";
    type: IOVideoWriter;
    argument {
        name: "path";
        type: pb_string;
        value: "/home/geislerd/bird_view_23.avi";
    }
    input {
        node: "Bird View";
        port: 0;
    }
}