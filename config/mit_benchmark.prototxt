name: "MIT Saliency Benchmark";

#
# Dataset reader
#

node {
    name: "Image Reader";
    type: IOImageReader;
    argument {
        name: "path";
        type: pb_string;
        value: "/media/geislerd/Documents/repo/MIT/trainSetClean/Stimuli/";
    }
}

node {
    name: "Fixation Reader";
    type: IOImageReader;
    argument {
        name: "path";
        type: pb_string;
        value: "/media/geislerd/Documents/repo/MIT/trainSetClean/FIXATIONMAPS/";
    }
}

#
# Fixation Heatmap
#

node {
    name: "Fixation Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    input {
        node: "Fixation Reader";
        port: 0;
    }
}

#
# Boolean Maps Saliency Calculation
#

node {
    name: "Convert to LAB";
    type: UtilsImageConverter;
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_LABImage";
    }
    input {
        node: "Image Reader";
        port: 0;
    }
}

node {
    name: "Seperate Channels";
    type: UtilsMatrixSplit;
    argument {
        name: "type";
        type: pb_complex;
        value: "cv::Vec3f";
    }
    input {
        node: "Convert to LAB";
        port: 0;
    }
}

node {
    name: "Convert to Intensity L";
    type: UtilsImageConverter;
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_IntensityImage";
    }
    input {
        node: "Seperate Channels";
        port: 0;
    }
}

node {
    name: "Convert to Intensity A";
    type: UtilsImageConverter;
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_IntensityImage";
    }
    input {
        node: "Seperate Channels";
        port: 1;
    }
}

node {
    name: "Convert to Intensity B";
    type: UtilsImageConverter;
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_IntensityImage";
    }
    input {
        node: "Seperate Channels";
        port: 2;
    }
}

node {
    name: "Boolean Map channel L";
    type: SaliencyBooleanMaps;
    input {
        node: "Convert to Intensity L";
        port: 0;
    }
}

node {
    name: "Boolean Map channel A";
    type: SaliencyBooleanMaps;
    input {
        node: "Convert to Intensity A";
        port: 0;
    }
}

node {
    name: "Boolean Map channel B";
    type: SaliencyBooleanMaps;
    input {
        node: "Convert to Intensity B";
        port: 0;
    }
}

node {
    name: "Merge Boolean Maps Activations";
    type: UtilsMatrixMerge;
    argument {
        name: "type";
        type: pb_complex;
        value: "cv::Vec3f";
    }
    input {
        node: "Boolean Map channel L";
        port: 0;
    }
    input {
        node: "Boolean Map channel A";
        port: 0;
    }
    input {
        node: "Boolean Map channel B";
        port: 0;
    }
}

node {
    name: "Boolean Maps";
    type: UtilsMatrixSum;
    argument {
        name: "type";
        type: pb_complex;
        value: "cv::Vec3f";
    }
    input {
        node: "Merge Boolean Maps Activations";
        port: 0;
    }
}

#
# Spectral Saliency
#

node {
    name: "Convert to Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    input {
        node: "Image Reader";
        port: 0;
    }
}

node {
    name: "Spectral Whitening";
    type: SaliencySpectralWhitening;
    input {
        node: "Convert to Heatmap";
        port: 0;
    }
}

#
# Itti & Koch
#

node {
    name: "Orientation 0°";
    type: SaliencyOrientation;
    property {
        name: "theta";
        type: pb_float;
        value: "0.0f";
    }
    input {
        node: "Convert to Heatmap";
        port: 0;
    }
}

node {
    name: "Orientation 45°";
    type: SaliencyOrientation;
    property {
        name: "theta";
        type: pb_float;
        value: "45.0f * (M_PI/180.0f)";
    }
    input {
        node: "Convert to Heatmap";
        port: 0;
    }
}

node {
    name: "Orientation 90°";
    type: SaliencyOrientation;
    property {
        name: "theta";
        type: pb_float;
        value: "90.0f * (M_PI/180.0f)";
    }
    input {
        node: "Convert to Heatmap";
        port: 0;
    }
}

node {
    name: "Orientation 135°";
    type: SaliencyOrientation;
    property {
        name: "theta";
        type: pb_float;
        value: "135.0f * (M_PI/180.0f)";
    }
    input {
        node: "Convert to Heatmap";
        port: 0;
    }
}

node {
    name: "Itti & Koch Orientation 0°";
    type: SaliencyIttiKoch;
    input {
        node: "Orientation 0°";
        port: 0;
    }
}

node {
    name: "Itti & Koch Orientation 45°";
    type: SaliencyIttiKoch;
    input {
        node: "Orientation 45°";
        port: 0;
    }
}

node {
    name: "Itti & Koch Orientation 90°";
    type: SaliencyIttiKoch;
    input {
        node: "Orientation 90°";
        port: 0;
    }
}

node {
    name: "Itti & Koch Orientation 135°";
    type: SaliencyIttiKoch;
    input {
        node: "Orientation 135°";
        port: 0;
    }
}

node {
    name: "Itti & Koch Channel L";
    type: SaliencyIttiKoch;
    input {
        node: "Seperate Channels";
        port: 0;
    }
}

node {
    name: "Itti & Koch Channel A";
    type: SaliencyIttiKoch;
    input {
        node: "Seperate Channels";
        port: 1;
    }
}

node {
    name: "Itti & Koch Channel B";
    type: SaliencyIttiKoch;
    input {
        node: "Seperate Channels";
        port: 2;
    }
}

 node {
     name: "Merge Itti & Koch Orientation Activations";
     type: UtilsMatrixMerge;
     argument {
         name: "type";
         type: pb_complex;
         value: "cv::Vec4f";
     }
     input {
         node: "Itti & Koch Orientation 0°";
         port: 0;
     }
     input {
         node: "Itti & Koch Orientation 45°";
         port: 0;
     }
     input {
         node: "Itti & Koch Orientation 90°";
         port: 0;
     }
     input {
         node: "Itti & Koch Orientation 135°";
         port: 0;
     }
 }

 node {
     name: "Itti & Koch Orientation Activation";
     type: UtilsMatrixSum;
     argument {
         name: "type";
         type: pb_complex;
         value: "cv::Vec4f";
     }
     input {
         node: "Merge Itti & Koch Orientation Activations";
         port: 0;
     }
 }

 node {
     name: "Merge Itti & Koch Color Activations";
     type: UtilsMatrixMerge;
     argument {
         name: "type";
         type: pb_complex;
         value: "cv::Vec2f";
     }
     input {
         node: "Itti & Koch Channel A";
         port: 0;
     }
     input {
         node: "Itti & Koch Channel B";
         port: 0;
     }
 }

 node {
     name: "Itti & Koch Color Activation";
     type: UtilsMatrixSum;
     argument {
         name: "type";
         type: pb_complex;
         value: "cv::Vec2f";
     }
     input {
         node: "Merge Itti & Koch Color Activations";
         port: 0;
     }
 }

 node {
     name: "Itti & Koch Normed Intensity Activation";
     type: UtilsNormalize;
     input {
         node: "Itti & Koch Channel L";
         port: 0;
     }
 }

 node {
     name: "Itti & Koch Normed Orientation Activation";
     type: UtilsNormalize;
     input {
         node: "Itti & Koch Orientation Activation";
         port: 0;
     }
 }

 node {
     name: "Itti & Koch Normed Color Activation";
     type: UtilsNormalize;
     input {
         node: "Itti & Koch Color Activation";
         port: 0;
     }
 }

 node {
     name: "Merge Itti & Koch Activations";
     type: UtilsMatrixMerge;
     argument {
         name: "type";
         type: pb_complex;
         value: "cv::Vec3f";
     }
     input {
         node: "Itti & Koch Normed Color Activation";
         port: 0;
     }
     input {
         node: "Itti & Koch Normed Orientation Activation";
         port: 0;
     }
     input {
         node: "Itti & Koch Normed Intensity Activation";
         port: 0;
     }
 }

 node {
     name: "Itti & Koch";
     type: UtilsMatrixSum;
     argument {
         name: "type";
         type: pb_complex;
         value: "cv::Vec3f";
     }
     input {
         node: "Merge Itti & Koch Activations";
         port: 0;
     }
 }

#
# Highpass Saliency
#

node {
     name: "Highpass Channel L";
     type: SaliencyHighpass;
     input {
         node: "Seperate Channels";
         port: 0;
     }
 }

 node {
     name: "Highpass Channel A";
     type: SaliencyHighpass;
     input {
         node: "Seperate Channels";
         port: 1;
     }
 }

 node {
     name: "Highpass Channel B";
     type: SaliencyHighpass;
     input {
         node: "Seperate Channels";
         port: 2;
     }
 }

 node {
     name: "Merge Highpass Activations";
     type: UtilsMatrixMerge;
     argument {
         name: "type";
         type: pb_complex;
         value: "cv::Vec3f";
     }
     input {
         node: "Highpass Channel L";
         port: 0;
     }
     input {
         node: "Highpass Channel A";
         port: 0;
     }
     input {
         node: "Highpass Channel B";
         port: 0;
     }
 }

 node {
     name: "Highpass Saliency";
     type: UtilsMatrixSum;
     argument {
         name: "type";
         type: pb_complex;
         value: "cv::Vec3f";
     }
     input {
         node: "Merge Highpass Activations";
         port: 0;
     }
 }

#
# Pearson Evaluation
#

node {
    name: "Pearson Evaluation of Boolean Maps";
    type: SaliencyPearson;
    input {
        node: "Boolean Maps";
        port: 0;
    }
    input {
        node: "Fixation Heatmap";
        port: 0;
    }
}

node {
    name: "Pearson Evaluation of Spectral Whitening";
    type: SaliencyPearson;
    input {
        node: "Spectral Whitening";
        port: 0;
    }
    input {
        node: "Fixation Heatmap";
        port: 0;
    }
}

node {
    name: "Pearson Evaluation of Itti & Koch";
    type: SaliencyPearson;
    input {
        node: "Itti & Koch";
        port: 0;
    }
    input {
        node: "Fixation Heatmap";
        port: 0;
    }
}

node {
    name: "Pearson Evaluation of Highpass";
    type: SaliencyPearson;
    input {
        node: "Highpass Saliency";
        port: 0;
    }
    input {
        node: "Fixation Heatmap";
        port: 0;
    }
}

#
# Show Boolean Maps Activation
#

node {
    name: "Boolean Maps Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_RGBImage";
    }
    input {
        node: "Boolean Maps";
        port: 0;
    }
}

node {
    name: "Show Boolean Maps";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Boolean Maps";
    }
    input {
        node: "Boolean Maps Heatmap";
        port: 0;
    }
}

#
# Show Spectral Whitening Activation
#

node {
    name: "Spectral Whitening Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_RGBImage";
    }
    input {
        node: "Spectral Whitening";
        port: 0;
    }
}

node {
    name: "Spectral Whitening Maps";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Spectral Whitening";
    }
    input {
        node: "Spectral Whitening Heatmap";
        port: 0;
    }
}

#
# Show Itti & Koch Activation
#

node {
    name: "Itti & Koch Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_RGBImage";
    }
    input {
        node: "Itti & Koch";
        port: 0;
    }
}

node {
    name: "Itti & Koch Maps";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Itti & Koch";
    }
    input {
        node: "Itti & Koch Heatmap";
        port: 0;
    }
}

#
# Show Highpass Activation
#

node {
    name: "Highpass Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_RGBImage";
    }
    input {
        node: "Highpass Saliency";
        port: 0;
    }
}

node {
    name: "Highpass Maps";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Highpass Saliency";
    }
    input {
        node: "Highpass Heatmap";
        port: 0;
    }
}

#
# Show Raw Input
#

node {
    name: "Show Image";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Raw Image";
    }
    input {
        node: "Image Reader";
        port: 0;
    }
}

#
# Show Fixation Heatmap
#

node {
    name: "Convert Fixation Heatmap to RGB";
    type: UtilsImageConverter;
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_RGBImage";
    }
    input {
        node: "Fixation Heatmap";
        port: 0;
    }
}

node {
    name: "Show Fixation";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Fixation Heatmap";
    }
    input {
        node: "Convert Fixation Heatmap to RGB";
        port: 0;
    }
}

#
# FPS Plot
#

node {
    name: "FPS Counter";
    type: UtilsFPSCounter;
    input {
        node: "Boolean Maps";
        port: 0;
    }
}

node {
    name: "FPS Plot";
    type: Plot;
    argument {
        name: "line0";
        type: pb_string;
        value: "fps";
    }
    input {
        node: "FPS Counter";
        port: 0;
    }
}

node {
    name: "Show FPS Plot";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "FPS";
    }
    input {
        node: "FPS Plot";
        port: 0;
    }
}

#
# Evaluation Plot
#

node {
    name: "Evaluation Plot";
    type: Plot;
    argument {
        name: "line0";
        type: pb_string;
        value: "Boolean Maps";
    }
    argument {
        name: "line1";
        type: pb_string;
        value: "Spectral Whitening";
    }
    argument {
        name: "line2";
        type: pb_string;
        value: "Itti & Koch";
    }
    argument {
        name: "line3";
        type: pb_string;
        value: "Highpass";
    }
    input {
        node: "Pearson Evaluation of Boolean Maps";
        port: 0;
    }
    input {
        node: "Pearson Evaluation of Spectral Whitening";
        port: 0;
    }
    input {
        node: "Pearson Evaluation of Itti & Koch";
        port: 0;
    }
    input {
        node: "Pearson Evaluation of Highpass";
        port: 0;
    }
}

node {
    name: "Show Evaluation Plot";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Pearson Coefficent";
    }
    input {
        node: "Evaluation Plot";
        port: 0;
    }
}