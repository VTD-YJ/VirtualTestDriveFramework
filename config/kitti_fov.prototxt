name: "Kitti FOV";

##
## Random gaze generator
##

node {
    name: "Random Gaze";
    type: GazeRandom;
}


##
## Extract Gaze components
##

node {
    name: "Extract Origin X";
    type: GazeSelector;
    argument {
        name: "component";
        type: pb_complex;
        value: "saliency_sandbox::gaze::Gaze::ORIGIN_X";
    }
    input {
        node: "Random Gaze";
        port: 0;
    }
}

node {
    name: "Extract Origin Y";
    type: GazeSelector;
    argument {
        name: "component";
        type: pb_complex;
        value: "saliency_sandbox::gaze::Gaze::ORIGIN_Y";
    }
    input {
        node: "Random Gaze";
        port: 0;
    }
}

node {
    name: "Extract Origin Z";
    type: GazeSelector;
    argument {
        name: "component";
        type: pb_complex;
        value: "saliency_sandbox::gaze::Gaze::ORIGIN_Z";
    }
    input {
        node: "Random Gaze";
        port: 0;
    }
}

node {
    name: "Extract Inclination";
    type: GazeSelector;
    argument {
        name: "component";
        type: pb_complex;
        value: "saliency_sandbox::gaze::Gaze::ANGLE_INCLINATION";
    }
    input {
        node: "Random Gaze";
        port: 0;
    }
}

node {
    name: "Extract Azimuth";
    type: GazeSelector;
    argument {
        name: "component";
        type: pb_complex;
        value: "saliency_sandbox::gaze::Gaze::ANGLE_AZIMUTH";
    }
    input {
        node: "Random Gaze";
        port: 0;
    }
}


##
## Plot Gaze
##

node {
    name: "Origin Plot";
    type: Plot;
    argument {
        name: "line0";
        type: pb_string;
        value: "x";
    }
    argument {
        name: "line1";
        type: pb_string;
        value: "y";
    }
    argument {
        name: "line2";
        type: pb_string;
        value: "z";
    }
    input {
        node: "Extract Origin X";
        port: 0;
    }
    input {
        node: "Extract Origin Y";
        port: 0;
    }
    input {
        node: "Extract Origin Z";
        port: 0;
    }
}

node {
    name: "Show Origin Plot";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Origin";
    }
    input {
        node: "Origin Plot";
        port: 0;
    }
}

node {
    name: "Angle Plot";
    type: Plot;
    argument {
        name: "line0";
        type: pb_string;
        value: "inclination";
    }
    argument {
        name: "line1";
        type: pb_string;
        value: "azimuth";
    }
    input {
        node: "Extract Inclination";
        port: 0;
    }
    input {
        node: "Extract Azimuth";
        port: 0;
    }
}

node {
    name: "Show Angle Plot";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Angle";
    }
    input {
        node: "Angle Plot";
        port: 0;
    }
}

##
## Read Kitti Dataset
##

node {
    name: "Kitti Reader";
    type: KittiReader;
    argument {
        name: "path";
        type: pb_string;
        #value: "${DIR_DATA}/kitti/2011_09_26/2011_09_26_drive_0001_sync/";
        value: "/media/geislerd/Documents/repo/Kitti/data/2011_09_26/2011_09_26_drive_0029_sync/";
    }
}

##
## Show raw Kitti data
##

node {
    name: "Show Camera 2";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Kitti Cam 2";
    }
    input {
        node: "Kitti Reader";
        port: 2;
    }
}

##
## Show velodyne points
##

node {
    name: "Velodyne polar image";
    type: KittiVelodynePolar;
    input {
        node: "Kitti Reader";
        port: 4;
    }
}

node {
    name: "Velodyne polar distance Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "width";
        type: pb_uint32;
        value: "360";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "180";
    }
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_RGBImage";
    }
    input {
        node: "Velodyne polar image";
        port: 0;
    }
}

node {
    name: "Velodyne polar reflection Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "width";
        type: pb_uint32;
        value: "360";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "180";
    }
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_RGBImage";
    }
    input {
        node: "Velodyne polar image";
        port: 1;
    }
}

node {
    name: "Show Velodyne Distance";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Velodyne Distance";
    }
    input {
        node: "Velodyne polar distance Heatmap";
        port: 0;
    }
}

node {
    name: "Show Velodyne Reflection";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Velodyne Reflection";
    }
    input {
        node: "Velodyne polar reflection Heatmap";
        port: 0;
    }
}

##
## Calculate FOV
##

node {
    name: "FOV";
    type: GazeFOV;
    input {
        node: "Random Gaze";
        port: 0;
    }
    input {
        node: "Velodyne polar image";
        port: 0;
    }
}

node {
    name: "FOV Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "width";
        type: pb_uint32;
        value: "360";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "180";
    }
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_RGBImage";
    }
    input {
        node: "FOV";
        port: 0;
    }
}

node {
    name: "Show FOV";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "FOV";
    }
    input {
        node: "FOV Heatmap";
        port: 0;
    }
}

node {
    name: "FOV2Cam";
    type: KittiFOVToCam;
    input {
        node: "FOV";
        port: 0;
    }
    input {
        node: "Velodyne polar image";
        port: 0;
    }
    input {
        node: "Kitti Reader";
        port: 7;
    }
}

node {
    name: "FOV2Cam Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_RGBImage";
    }
    input {
        node: "FOV2Cam";
        port: 0;
    }
}

node {
    name: "Show FOV2Cam";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "FOV2Cam";
    }
    input {
        node: "FOV2Cam Heatmap";
        port: 0;
    }
}

##
## Extract LAB color features
##

node {
    name: "Convert to LAB";
    type: UtilsImageConverter;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_LABImage";
    }
    input {
        node: "Kitti Reader";
        port: 2;
    }
}

node {
    name: "LAB feature Map";
    type: UtilsMatrixSplit;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    argument {
        name: "type";
        type: pb_complex;
        value: "cv::Vec3f";
    }
    input {
        node: "Convert to LAB";
        port: 0;
    }
}

##
## Calculate Boolean Map Activation
## on each LAB channel
##

node {
    name: "Intensity Boolean Map";
    type: SaliencyBooleanMaps;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    input {
        node: "LAB feature Map";
        port: 0;
    }
    input {
        node: "FOV2Cam";
        port: 0;
    }
}

node {
    name: "Green-Red Feature Boolean Map";
    type: SaliencyBooleanMaps;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    input {
        node: "LAB feature Map";
        port: 1;
    }
    input {
        node: "FOV2Cam";
        port: 0;
    }
}

node {
    name: "Blue-Yellow Feature Boolean Map";
    type: SaliencyBooleanMaps;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    input {
        node: "LAB feature Map";
        port: 2;
    }
    input {
        node: "FOV2Cam";
        port: 0;
    }
}

##
## Sum up Boolean Maps Activations
##

node {
    name: "Merge Boolean Maps";
    type: UtilsMatrixMerge;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    argument {
        name: "type";
        type: pb_complex;
        value: "cv::Vec3f";
    }
    input {
        node: "Intensity Boolean Map";
        port: 0;
    }
    input {
        node: "Green-Red Feature Boolean Map";
        port: 0;
    }
    input {
        node: "Blue-Yellow Feature Boolean Map";
        port: 0;
    }
}

node {
    name: "Boolean Map";
    type: UtilsMatrixSum;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    argument {
        name: "type";
        type: pb_complex;
        value: "cv::Vec3f";
    }
    input {
        node: "Merge Boolean Maps";
        port: 0;
    }
}

##
## Plot Boolean Map
##

node {
    name: "Boolean Map Heatmap";
    type: UtilsImageConverter;
    argument {
        name: "width";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::WIDTH";
    }
    argument {
        name: "height";
        type: pb_uint32;
        value: "saliency_sandbox::kitti::LeftRGBImageReader::Image::HEIGHT";
    }
    argument {
        name: "input";
        type: pb_complex;
        value: "saliency_sandbox::utils::_HeatmapImage";
    }
    argument {
        name: "output";
        type: pb_complex;
        value: "saliency_sandbox::utils::_RGBImage";
    }
    input {
        node: "Boolean Map";
        port: 0;
    }
}

node {
    name: "Show Boolean Map";
    type: IOImageShow;
    argument {
        name: "window";
        type: pb_string;
        value: "Boolean Maps";
    }
    input {
        node: "Boolean Map Heatmap";
        port: 0;
    }
}